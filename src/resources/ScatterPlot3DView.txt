package com.thf.ge.am.wbui.viewpart.prototypes.jz3d;

import java.awt.Component;

import javax.annotation.PostConstruct;

import org.eclipse.swt.widgets.Composite;
//import org.eclipse.ui.part.ViewPart;
import org.jzy3d.bridge.swt.Bridge;
import org.jzy3d.chart.Chart;
import org.jzy3d.chart.factories.AWTChartComponentFactory;
import org.jzy3d.colors.Color;
import org.jzy3d.colors.ColorMapper;
import org.jzy3d.colors.colormaps.ColorMapRainbow;
import org.jzy3d.maths.Range;
import org.jzy3d.plot3d.builder.Builder;
import org.jzy3d.plot3d.builder.Mapper;
import org.jzy3d.plot3d.builder.concrete.OrthonormalGrid;
import org.jzy3d.plot3d.primitives.Shape;
import org.jzy3d.plot3d.rendering.canvas.Quality;

public class ScatterPlot3DView {

	public static final String ID = "sc.ndt.aml.view.ScatterPlot3DView"; //$NON-NLS-1$
	private Chart chart;

	public ScatterPlot3DView() {
	}

	@PostConstruct
	public void createPartControl(Composite parent) {

		Bridge.adapt(parent, (Component) getChart().getCanvas());

		createActions();
//		initializeToolBar();
//		initializeMenu();
	}

	public Chart getChart() {

		Mapper mapper = new Mapper() {
			public double f(double x, double y) {
				return x * Math.sin(x * y);
			}
		};

		// Define range and precision for the function to plot
		Range range = new Range(-3, 3);
		int steps = 80;

		// Create the object to represent the function over the given range.
		final Shape surface = Builder.buildOrthonormal(new OrthonormalGrid(range, steps, range, steps), mapper);
		surface.setColorMapper(new ColorMapper(new ColorMapRainbow(), surface.getBounds().getZmin(),
				surface.getBounds().getZmax(), new Color(1, 1, 1, .5f)));
		surface.setFaceDisplayed(true);
		surface.setWireframeDisplayed(false);

		// Create a chart
		chart = AWTChartComponentFactory.chart(Quality.Advanced, "awt");
		chart.getScene().getGraph().add(surface);
		// chart.addMouseController();

		return chart;
	}

	/**
	 * Create the actions.
	 */
	private void createActions() {
		// Create the actions
	}

//	/**
//	 * Initialize the toolbar.
//	 */
//	private void initializeToolBar() {
//		IToolBarManager toolbarManager = getViewSite().getActionBars().getToolBarManager();
//	}
//
//	/**
//	 * Initialize the menu.
//	 */
//	private void initializeMenu() {
//		IMenuManager menuManager = getViewSite().getActionBars().getMenuManager();
//	}
//
	public void setFocus() {
		// Set the focus
	}
}